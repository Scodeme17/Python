Approach: Alternating Split of a Linked List
Problem Statement:
'''
Given a singly linked list's head. Your task is to complete the function alternatingSplitList() that splits the given linked list into two smaller lists. The sublists should be made from alternating elements from the original list.
Note: 
The sublist should be in the order with respect to the original list.
Your have to return an array containing the both sub-linked lists.
Examples:

Input: LinkedList = 0->1->0->1->0->1
Output: 0->0->0 , 1->1->1
Explanation: After forming two sublists of the given list as required, we have two lists as: 0->0->0 and 1->1->1.

Input: LinkedList = 2->5->8->9->6
Output: 2->8->6 , 5->9
Explanation: After forming two sublists of the given list as required, we have two lists as: 2->8->6 and 5->9.
'''

#code below

def alternatingSplitList(self, head):
    head1 = head2 = temp1 = temp2 = None  # Initialize heads and tails for two lists
    count = 0  # Counter to track position in the original list

    while head is not None:  # Traverse the original list
        if count % 2 == 0:  # Even-indexed nodes
            if head1 is None:  # Initialize first list
                head1 = temp1 = head
            else:  # Append to first list
                temp1.next = head
                temp1 = temp1.next
        else:  # Odd-indexed nodes
            if head2 is None:  # Initialize second list
                head2 = temp2 = head
            else:  # Append to second list
                temp2.next = head
                temp2 = temp2.next

        head = head.next  # Move to the next node
        count += 1  # Increment counter
    # Terminate the two lists properly
    if temp1:
        temp1.next = None
    if temp2:
        temp2.next = None
    # Return the two heads as an array
    return [head1, head2]
